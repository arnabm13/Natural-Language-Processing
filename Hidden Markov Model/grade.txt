Grade: 33.00/50.00

3 Deduction(s):

--------------
#1: 6.00 points
Failing test: test_hmm_viterbi: Test viterbi algorithm on 'time flies like an arrow'
		The given model should predict N,V,P,D,N tags.
		@points=6
		
Traceback (most recent call last):
  File "../assignments-sol/a2/a2_test.py", line 134, in test_hmm_viterbi
    path, proba = model.viterbi(['time', 'flies', 'like', 'an', 'arrow'])
TypeError: 'NoneType' object is not iterable

source:
	def test_hmm_viterbi(self):
 		"""Test viterbi algorithm on 'time flies like an arrow'
 		The given model should predict N,V,P,D,N tags.
 		@points=6
 		"""
 		model = HMM()
 		model.states = ['D', 'N', 'P', 'V']
 
 		model.start_probas = {'D': .3,
 							  'N': .4,
 							  'P': .1,
 							  'V': .2,
 							  }
 
 		model.emission_probas = {'D': {'time': 0.0, 'flies': 0.0, 'like': 0.0, 'an': 1.0, 'arrow': 0.0},
 								 'V': {'time': 0.0, 'flies': 0.5, 'like': 0.5, 'an': 0.0, 'arrow': 0.0},
 								 'P': {'time': 0.0, 'flies': 0.0, 'like': 1.0, 'an': 0.0, 'arrow': 0.0},
 								 'N': {'time': 0.3, 'flies': 0.3, 'like': 0.0, 'an': 0.0, 'arrow': 0.4}
 								 }
 		model.transition_probas = {'D': {'D': 0.0, 'N': 1.0, 'P': 0.0, 'V': 0.0},
 								   'N': {'D': 0.0, 'N': 0.3, 'P': 0.2, 'V': 0.5},
 								   'P': {'D': 0.8, 'N': 0.2, 'P': 0.0, 'V': 0.0},
 								   'V': {'D': 0.2, 'N': 0.5, 'P': 0.3, 'V': 0.0}
 								   }
 
 		path, proba = model.viterbi(['time', 'flies', 'like', 'an', 'arrow'])
 		self.assertListEqual(list(path), ['N', 'V', 'P', 'D', 'N'])
 		self.assertEqual(0.003, round(proba, 3))
--------------

--------------
#2: 6.00 points
Failing test: test_hmm_viterbi2: Test viterbi algorithm on 'time flies like an arrow'
		Here, we've modified the model to make the most probable
		path be N,N,V,D,N .
		@points=6
		
Traceback (most recent call last):
  File "../assignments-sol/a2/a2_test.py", line 164, in test_hmm_viterbi2
    path, proba = model.viterbi(['time', 'flies', 'like', 'an', 'arrow'])
TypeError: 'NoneType' object is not iterable

source:
	def test_hmm_viterbi2(self):
 		"""Test viterbi algorithm on 'time flies like an arrow'
 		Here, we've modified the model to make the most probable
 		path be N,N,V,D,N .
 		@points=6
 		"""
 		model = HMM()
 		model.states = ['D', 'N', 'P', 'V']
 
 		model.start_probas = {'D': .3,
 							  'N': .4,
 							  'P': .1,
 							  'V': .2,
 							  }
 
 		model.emission_probas = {'D': {'time': 0.0, 'flies': 0.0, 'like': 0.0, 'an': 1.0, 'arrow': 0.0},
 								 'V': {'time': 0.0, 'flies': 0.1, 'like': 0.9, 'an': 0.0, 'arrow': 0.0},
 								 'P': {'time': 0.0, 'flies': 0.0, 'like': 1.0, 'an': 0.0, 'arrow': 0.0},
 								 'N': {'time': 0.3, 'flies': 0.5, 'like': 0.0, 'an': 0.0, 'arrow': 0.2}
 								 }
 		model.transition_probas = {'D': {'D': 0.0, 'N': 1.0, 'P': 0.0, 'V': 0.0},
 								   'N': {'D': 0.0, 'N': 0.5, 'P': 0.1, 'V': 0.4},
 								   'P': {'D': 0.8, 'N': 0.2, 'P': 0.0, 'V': 0.0},
 								   'V': {'D': 0.4, 'N': 0.3, 'P': 0.3, 'V': 0.0}
 								   }
 
 		path, proba = model.viterbi(['time', 'flies', 'like', 'an', 'arrow'])
 		self.assertListEqual(list(path), ['N', 'N', 'V', 'D', 'N'])
 		self.assertEqual(0.0009, round(proba, 4))
--------------

--------------
#3: 5.00 points
Failing test: test_real_data: 
		@points=5
		
Traceback (most recent call last):
  File "../assignments-sol/a2/a2_test.py", line 176, in test_real_data
    path, proba = model.viterbi(sents[0][:8])
TypeError: 'NoneType' object is not iterable

source:
	def test_real_data(self):
 		"""
 		@points=5
 		"""
 		sents = [['Rockwell', 'International', 'Corp.', "'s", 'Tulsa', 'unit', 'said', 'it', 'signed', 'a', 'tentative', 'agreement', 'extending', 'its', 'contract', 'with', 'Boeing', 'Co.', 'to', 'provide', 'structural', 'parts', 'for', 'Boeing', "'s", '747', 'jetliners', '.'], ['Rockwell', 'said', 'the', 'agreement', 'calls', 'for', 'it', 'to', 'supply', '200', 'additional', 'so-called', 'shipsets', 'for', 'the', 'planes', '.']]
 		tags = [['NNP', 'NNP', 'NNP', 'POS', 'NNP', 'NN', 'VBD', 'PRP', 'VBD', 'DT', 'JJ', 'NN', 'VBG', 'PRP$', 'NN', 'IN', 'NNP', 'NNP', 'TO', 'VB', 'JJ', 'NNS', 'IN', 'NNP', 'POS', 'CD', 'NNS', '.'], ['NNP', 'VBD', 'DT', 'NN', 'VBZ', 'IN', 'PRP', 'TO', 'VB', 'CD', 'JJ', 'JJ', 'NNS', 'IN', 'DT', 'NNS', '.']]
 		model = HMM(.0001)
 		model.fit(sents, tags)
 		path, proba = model.viterbi(sents[0][:8])
 		self.assertListEqual(list(path), ['NNP', 'NNP', 'NNP', 'POS', 'NNP', 'NN', 'VBD', 'PRP'])
 		self.assertEqual(1.5e-8, round(proba, 9))		
--------------

